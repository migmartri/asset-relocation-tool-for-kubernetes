// Code generated by counterfeiter. DO NOT EDIT.
package libfakes

import (
	"sync"

	"gitlab.eng.vmware.com/marketplace-partner-eng/chart-mover/v2/lib"
	"k8s.io/helm/pkg/proto/hapi/chart"
)

type FakeHelmChart struct {
	GetValuesStub        func() *chart.Config
	getValuesMutex       sync.RWMutex
	getValuesArgsForCall []struct {
	}
	getValuesReturns struct {
		result1 *chart.Config
	}
	getValuesReturnsOnCall map[int]struct {
		result1 *chart.Config
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelmChart) GetValues() *chart.Config {
	fake.getValuesMutex.Lock()
	ret, specificReturn := fake.getValuesReturnsOnCall[len(fake.getValuesArgsForCall)]
	fake.getValuesArgsForCall = append(fake.getValuesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetValues", []interface{}{})
	fake.getValuesMutex.Unlock()
	if fake.GetValuesStub != nil {
		return fake.GetValuesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getValuesReturns
	return fakeReturns.result1
}

func (fake *FakeHelmChart) GetValuesCallCount() int {
	fake.getValuesMutex.RLock()
	defer fake.getValuesMutex.RUnlock()
	return len(fake.getValuesArgsForCall)
}

func (fake *FakeHelmChart) GetValuesCalls(stub func() *chart.Config) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = stub
}

func (fake *FakeHelmChart) GetValuesReturns(result1 *chart.Config) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = nil
	fake.getValuesReturns = struct {
		result1 *chart.Config
	}{result1}
}

func (fake *FakeHelmChart) GetValuesReturnsOnCall(i int, result1 *chart.Config) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = nil
	if fake.getValuesReturnsOnCall == nil {
		fake.getValuesReturnsOnCall = make(map[int]struct {
			result1 *chart.Config
		})
	}
	fake.getValuesReturnsOnCall[i] = struct {
		result1 *chart.Config
	}{result1}
}

func (fake *FakeHelmChart) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getValuesMutex.RLock()
	defer fake.getValuesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHelmChart) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.HelmChart = new(FakeHelmChart)
